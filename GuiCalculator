import javax.swing.*;
import javax.swing.border.LineBorder;

import java.awt.*;
import java.util.ArrayList;

public class GuiCalculator extends JFrame{

	//JPanel topPanel, midPanel, botPanel;
	topPanel top;
	midPanel mid;
	botPanel bot;
	
	public String currentOperation = "0";
	public ArrayList<String> doneOperation = new ArrayList<>();
	
	GuiCalculator(){
		
		top = new topPanel(this);
		mid = new midPanel(this);
		bot = new botPanel(this);
		
		add(top, BorderLayout.NORTH);
		add(mid, BorderLayout.CENTER);
		add(bot, BorderLayout.SOUTH);
		
	}

	public String evaluateResult() {
		
		String st = "";
		if(top.InputScale.getText().contains("DEC")) {
			for(String comp: doneOperation) {
				st += comp;
			}
		}else if(top.InputScale.getText().contains("HEX")) {
			for(String comp: doneOperation) {
				if(comp.contains("Mod")||comp.contains("÷")||comp.contains("⨉")||comp.contains("−")||comp.contains("+")
						||comp.contains("(")||comp.contains(")")) { st += comp ;}
				else {
					comp = comp.replaceAll(" ", "");
					st += top.hex2Dec(comp) + "";
				}
			}
		}else if(top.InputScale.getText().contains("OCT")) {
			for(String comp: doneOperation) {
				if(comp.contains("Mod")||comp.contains("÷")||comp.contains("⨉")||comp.contains("−")||comp.contains("+")
						||comp.contains("(")||comp.contains(")")) { st += comp ;}
				else {
					comp = comp.replaceAll(" ", "");
					st += top.oct2Dec(comp) + "";
				}
			}
		}else if(top.InputScale.getText().contains("BIN")) {
			for(String comp: doneOperation) {
				if(comp.contains("Mod")||comp.contains("÷")||comp.contains("⨉")||comp.contains("−")||comp.contains("+")
						||comp.contains("(")||comp.contains(")")) { st += comp ;}
				else {
					comp = comp.replaceAll(" ", "");
					st += top.bin2Dec(comp) + "";
				}
			}
		}	
			
			
		st = st.replaceAll(" ", "");
		st = st.replaceAll("−", "-");
		st = st.replaceAll("⨉", "*");
		st = st.replaceAll("÷", "/");
		st = st.replaceAll("Mod", "m");
//		System.out.println(st);
//		System.out.println(doneOperation);
		if(st.contains("/0")) {
			return "Cannot divide by zero";
		}
		
		if(top.InputScale.getText().contains("DEC"))
			return "" + (int)eval(st);
		else if(top.InputScale.getText().contains("HEX"))
			return top.dec2Hex("" + (int)eval(st));
		else if(top.InputScale.getText().contains("OCT"))
			return top.dec2Oct("" + (int)eval(st));
		else if(top.InputScale.getText().contains("BIN"))
			return top.dec2Bin("" + (int)eval(st));
		else
			return -1+"";
		
	}
	
  //this method was designed by Boann on 
  //https://stackoverflow.com/questions/3422673/how-to-evaluate-a-math-expression-given-in-string-form
	public static double eval(final String str) {
	    return new Object() {
	        int pos = -1, ch;

	        void nextChar() {
	            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
	        }

	        boolean eat(int charToEat) {
	            while (ch == ' ') nextChar();
	            if (ch == charToEat) {
	                nextChar();
	                return true;
	            }
	            return false;
	        }

	        double parse() {
	            nextChar();
	            double x = parseExpression();
	            if (pos < str.length()) throw new RuntimeException("Unexpected: " + (char)ch);
	            return x;
	        }

	        // Grammar:
	        // expression = term | expression `+` term | expression `-` term
	        // term = factor | term `*` factor | term `/` factor
	        // factor = `+` factor | `-` factor | `(` expression `)`
	        //        | number | functionName factor | factor `^` factor

	        double parseExpression() {
	            double x = parseTerm();
	            for (;;) {
	                if      (eat('+')) x += parseTerm(); // addition
	                else if (eat('-')) x -= parseTerm(); // subtraction
	                else return x;
	            }
	        }

	        double parseTerm() {
	            double x = parseFactor();
	            for (;;) {
	                if      (eat('*')) x *= parseFactor(); // multiplication
	                else if (eat('/')) x /= parseFactor(); // division
	                else return x;
	            }
	        }

	        double parseFactor() {
	            if (eat('+')) return parseFactor(); // unary plus
	            if (eat('-')) return -parseFactor(); // unary minus

	            double x;
	            int startPos = this.pos;
	            if (eat('(')) { // parentheses
	                x = parseExpression();
	                eat(')');
	            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
	                while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();
	                x = Double.parseDouble(str.substring(startPos, this.pos));
	            } else if (ch >= 'a' && ch <= 'z') { // functions
	                while (ch >= 'a' && ch <= 'z') nextChar();
	                String func = str.substring(startPos, this.pos);
	                x = parseFactor();
	                if (func.equals("sqrt")) x = Math.sqrt(x);
	                else if (func.equals("sin")) x = Math.sin(Math.toRadians(x));
	                else if (func.equals("cos")) x = Math.cos(Math.toRadians(x));
	                else if (func.equals("tan")) x = Math.tan(Math.toRadians(x));
	                else throw new RuntimeException("Unknown function: " + func);
	            } else {
	                throw new RuntimeException("Unexpected: " + (char)ch);
	            }

	            if(eat('m')) x = Math.floorMod((int)x, (int)parseFactor());//Mod
	            if (eat('^')) x = Math.pow(x, parseFactor()); // exponentiation

	            return x;
	        }
	    }.parse();
	}

}
